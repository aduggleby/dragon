using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

namespace Dragon.Interfaces
{
    public interface IRepository<T> where T : class
    {
        T Get(dynamic pk);
        T Get(T keyModel);
        IEnumerable<T> Get(IEnumerable<object> pks);
        IEnumerable<T> GetAll();

        IEnumerable<T> Query(string sql, dynamic param = null);

        [Obsolete("You don't need the generic type parameter")]
        IEnumerable<T> Query<TObsolete>(string sql, dynamic param = null) where TObsolete : class;

        TReturn ExecuteScalar<TReturn, TDBObject>(string sql, dynamic param = null);
        
        void Execute(string sql, dynamic param = null);

        IEnumerable<TResult> Query<TFirst, TSecond, TResult>(string sql, Func<TFirst, TSecond, TResult> mapping,
            dynamic param = null) where TResult : class;
      

        /// <summary>
        /// Use for objects with a primary key. Key generated by DB is returned.
        /// </summary>
        /// <typeparam name="TKey"></typeparam>
        /// <param name="obj"></param>
        /// <returns></returns>
        TKey Insert<TKey>(T obj);

        /// <summary>
        /// Use for objects with composite keys. Keys must be set!
        /// </summary>
        /// <param name="obj"></param>
        void Insert(T obj);

        TKey Save<TKey>(T obj);
        void Update(T obj);
        void Delete(T obj);

        /// <summary>
        /// Performs a query with a set of AND filters.
        /// </summary>
        /// <param name="where">The values to filter for. Each entry will be concatenated with AND.</param>
        /// <returns></returns>
        IEnumerable<T> GetByWhere(Dictionary<string, object> @where);
    }
}