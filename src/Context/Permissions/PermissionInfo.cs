using Dragon.Interfaces;

namespace Dragon.Context.Permissions
{
    public class PermissionInfo : IPermissionInfo
    {
        public string DisplayName { get; set; }
        public string Spec { get; set; }
        public bool Inherit { get; set; }
        public string InheritedFrom { get; set; }

        #region autogenerated

        protected bool Equals(PermissionInfo other)
        {
            return string.Equals(DisplayName, other.DisplayName) && string.Equals(Spec, other.Spec) &&
                   Inherit.Equals(other.Inherit) && string.Equals(InheritedFrom, other.InheritedFrom);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((PermissionInfo)obj);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                int hashCode = (DisplayName != null ? DisplayName.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ (Spec != null ? Spec.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ Inherit.GetHashCode();
                hashCode = (hashCode * 397) ^ (InheritedFrom != null ? InheritedFrom.GetHashCode() : 0);
                return hashCode;
            }
        }

        # endregion
    }
}
